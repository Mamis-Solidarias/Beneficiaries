using System.Linq;
using System.Threading.Tasks;
using FluentAssertions;
using MamisSolidarias.Infrastructure.Beneficiaries;
using MamisSolidarias.WebAPI.Beneficiaries.Utils;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using NUnit.Framework;

namespace MamisSolidarias.WebAPI.Beneficiaries.DbAccess;

internal class Communities_Post
{
    
    private const string InMemoryConnectionString = "DataSource=:memory:";

    private BeneficiariesDbContext _dbContext = null!;
    private Endpoints.Communities.POST.DbAccess _dbAccess = null!;

    [SetUp]
    public void TestWithSqlite()
    {
        var connection = new SqliteConnection(InMemoryConnectionString);
        connection.Open();
        var options = new DbContextOptionsBuilder<BeneficiariesDbContext>()
            .UseSqlite(connection)
            .Options;
        
        _dbContext = new BeneficiariesDbContext(options);
        _dbContext.Database.EnsureCreated();

        _dbAccess = new Endpoints.Communities.POST.DbAccess(_dbContext);
    }

    [TearDown]
    public void Dispose()
    {
        _dbContext.Dispose();
    }

    [Test]
    public async Task WithGeneratedIDs_Succeeds()
    {
        // Arrange
        var communities = DataFactory.GetCommunities(3).ToArray();
        _dbContext.ChangeTracker.Clear();
        
        // Act
        await _dbAccess.CreateCommunities(communities, default);
        
        // Assert
        _dbContext.Communities.Should().HaveCount(3);
        foreach (var community in communities)
        {
            var res = await _dbContext.Communities
                .FirstOrDefaultAsync(t => 
                        t.Id == community.Id &&
                        t.Address == community.Address &&
                        t.Description == community.Description &&
                        t.Name == community.Name
                    , default);
            res.Should().NotBeNull();
        }
    }

    [Test]
    public async Task WithAutoGeneratedIDs_Succeeds()
    {
        // Arrange
        var communities = DataFactory.GetCommunities(3).ToArray();
        foreach (var community in communities)
        {
            community.Id = null;
        }
        
        // Act
        await _dbAccess.CreateCommunities(communities, default);
        
        // Assert
        _dbContext.Communities.Should().HaveCount(3);
        foreach (var community in communities)
        {
            var res = await _dbContext.Communities
                .FirstOrDefaultAsync(t => 
                        t.Id == community.Name.ToUpperInvariant().Substring(0,2) &&
                        t.Address == community.Address &&
                        t.Description == community.Description &&
                        t.Name == community.Name
                    , default);
            res.Should().NotBeNull();
        }
    }
    
    [Test]
    public async Task WithRepeatedIds_Fails()
    {
        // Arrange
        var entity = DataFactory.GetCommunity();
        await _dbContext.Communities.AddAsync(entity);
        await _dbContext.SaveChangesAsync();
        _dbContext.ChangeTracker.Clear(); 
        
        var community = DataFactory.GetCommunity();
        community.Id = entity.Id;

        // Act
        var action = async () => await _dbAccess.CreateCommunities(new []{community}, default);
        
        // Assert
        await action.Should().ThrowExactlyAsync<DbUpdateException>();
        _dbContext.Communities.Should().HaveCount(1);
    }
    
    [Test]
    public async Task AddsMultiple_WithRepeatedIds_Fails()
    {
        // Arrange
        var entity = DataFactory.GetCommunity();
        await _dbContext.Communities.AddAsync(entity);
        await _dbContext.SaveChangesAsync();
        _dbContext.ChangeTracker.Clear(); 
        
        var communities = DataFactory.GetCommunities(5).ToArray();
        communities.Last().Id = entity.Id;

        // Act
        var action = async () => await _dbAccess.CreateCommunities(communities, default);
        
        // Assert
        await action.Should().ThrowExactlyAsync<DbUpdateException>();
        _dbContext.Communities.Should().HaveCount(1);
    }
}















